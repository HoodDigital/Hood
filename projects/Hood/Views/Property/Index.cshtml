@model ListPropertyModel
@inject ISiteConfiguration _site
@{
    ViewData["Title"] = "Properties";
    Layout = "_Layout";

    SeoSettings meta = _site.GetSeo();
    BasicSettings info = _site.GetBasicSettings();
    PropertySettings _settings = _site.GetPropertySettings();
    string url = Context.GetSiteUrl(true, true);
    if (meta.CanonicalUrl.IsSet())
    {
        url = string.Format("{0}{1}", meta.CanonicalUrl.TrimEnd('/'), Context.Request.Path);
    }

}
@section metas {
    <meta name="description" content="Have a look a our properties, there are plenty to have a look at!" />
    <meta property="og:author" content="@meta.OgAuthor" />
    <meta property="og:title" content="Properties - @info.SiteTitle" />
    <meta property="og:image" content="@meta.OgImageUrl" />
    <meta property="og:image:secure_url" content="@meta.OgSecureImageUrl" />
    <meta property="og:description" content="Have a look a our properties, there are plenty to have a look at!" />
    <meta name="twitter:title" content="Properties - @info.SiteTitle" />
    <meta name="twitter:description" content="Have a look a our properties, there are plenty to have a look at!" />
    <meta name="twitter:image" content="@meta.TwitterCardImageUrl" />
}
<div class="jumbotron">
    <div class="container">
        <h1>Search Properties</h1>
        <h2>Search our property portfolio...</h2>
    </div>
</div>
<section class="ptb-15" id="search-rental-box">
    @{ await Html.RenderPartialAsync("_PropertySearch"); }
</section>
<div class="container">
    <div class="ptb-60 row">
        <div class="col-sm-6">
            <div class="p-xs">
                Showing <strong>@((Model.Properties.CurrentPage - 1) * Model.Properties.PageSize + 1)</strong> -
                <strong>
                    @if ((Model.Properties.CurrentPage * Model.Properties.PageSize) >= Model.Properties.Count)
                    {
                        @Model.Properties.Count
                    }
                    else
                    {
                        @(Model.Properties.CurrentPage * Model.Properties.PageSize)
                    }
                </strong>
                of @Model.Properties.Count products
            </div>
        </div>
        <div class="col-sm-6 text-right">@{ await Html.RenderPartialAsync("_Pagination"); }</div>
    </div>
    @if (Model.Properties.Count == 0)
    {
        @if (string.IsNullOrEmpty(Model.Filters.search))
        {
            <div class="row text-center">
                <div class="col-md-8 col-md-offset-2">
                    <h3 class="h4">There are no properties to view just yet</h3>
                    <div class="spacer-15"></div>
                    <p class="lead">Please check back later.</p>
                </div>
            </div>
        }
        else
        {
            <div class="row text-center">
                <div class="col-md-8 col-md-offset-2">
                    <h3 class="h4">We couldn't find anything!</h3>
                    <div class="spacer-15"></div>
                    <p class="lead">Your search '@Model.Filters.search' did not return any results. Please try searching for something else.</p>
                </div>
            </div>
        }
    }
    else
    {
        <div class="row">
            @foreach (PropertyListingApi content in Model.Properties.Items.Select(c => new PropertyListingApi(c, _settings)))
            {
                await Html.RenderPartialAsync("_PropertyCard", content);
            }
        </div>
        <div class="text-center">
            @{   await Html.RenderPartialAsync("_Pagination");}
        </div>
    }
</div>
